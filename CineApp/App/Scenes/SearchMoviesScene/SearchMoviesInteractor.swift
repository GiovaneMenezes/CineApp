//
//  SearchMoviesInteractor.swift
//  CineApp
//
//  Created by Giovane Silva de Menezes Cavalcante on 08/01/19.
//  Copyright (c) 2019 GSMenezes. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import RxSwift

protocol SearchMoviesInteractorInput {
    func searchMovie(request: SearchMoviesScene.SearchMovies.Request)
    func selectMovie(request: SearchMoviesScene.SelectMovie.Request)
}

protocol SearchMoviesInteractorOutput {
    func presentSearchMovieResult(response: SearchMoviesScene.SearchMovies.Response)
    func presentSelectedMovie(response: SearchMoviesScene.SelectMovie.Response)
}

protocol SearchMoviesDataSource {
    var selectedMovie: MovieResult? { get }
}

protocol SearchMoviesDataDestination {
    
}

class SearchMoviesInteractor: SearchMoviesInteractorInput, SearchMoviesDataSource, SearchMoviesDataDestination {
    
    var selectedMovie: MovieResult?
    
    var disposeBag = DisposeBag()
    var output: SearchMoviesInteractorOutput?
    var searchMovieWorker: SearchMoviesWorker!
    var currentPage: Int = 1
    var numberOfPages: Int?
    var lastQuery = "empty"
    var resultList: [MovieResult] = []
    
    // Mark: Lifecycle
    
    init(searchMovieWorker: SearchMoviesWorker = SearchMoviesWorker()) {
        self.searchMovieWorker = searchMovieWorker
    }
    
    // MARK: Business logic
    
    func searchMovie(request: SearchMoviesScene.SearchMovies.Request) {
        guard currentPage <= (numberOfPages ?? 1) else {
            handleFetchMoviesFailure(error: MoviesError.lastPageReached)
            return
        }
        if request.query == "" {
            searchMovieAtAPI(query: lastQuery)
        } else if request.query != lastQuery {
            currentPage = 1
            numberOfPages = nil
            resultList = []
            searchMovieAtAPI(query: request.query)
        } else {
            searchMovieAtAPI(query: request.query)
        }
        
    }
    
    func searchMovieAtAPI(query: String) {
        searchMovieWorker.searchMovies(query: query, page: currentPage).subscribe { [weak self] result in
            switch result {
            case .success(let moviesPage):
                self?.handleFetchMoviesSuccess(result: moviesPage)
            case .error(let error):
                self?.handleFetchMoviesFailure(error: error)
            }
            }.disposed(by: disposeBag)
    }
    
    func selectMovie(request: SearchMoviesScene.SelectMovie.Request) {
        selectedMovie = resultList[request.index]
        let request = SearchMoviesScene.SelectMovie.Response()
        output?.presentSelectedMovie(response: request)
    }
    
    // MARK: Handlers
    
    func handleFetchMoviesSuccess(result: SearchMoviesPage) {
        guard let results = result.results, let numberOfPages = result.totalPages, let currentPage = result.page else {
            handleFetchMoviesFailure(error: MoviesError.unknown)
            return
        }
        self.currentPage = currentPage + 1
        self.numberOfPages = numberOfPages
        self.resultList.append(contentsOf: results)
        let response = SearchMoviesScene.SearchMovies.Response(state: .success(upcomingMovies: resultList))
        output?.presentSearchMovieResult(response: response)
    }
    
    func handleFetchMoviesFailure(error: Error) {
        let response = SearchMoviesScene.SearchMovies.Response(state: .failure(errorMessage: error.localizedDescription))
        output?.presentSearchMovieResult(response: response)
    }
}
