//
//  SearchMoviesViewController.swift
//  CineApp
//
//  Created by Giovane Silva de Menezes Cavalcante on 08/01/19.
//  Copyright (c) 2019 GSMenezes. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit

protocol SearchMoviesViewControllerInput {
    func displaySearchMovieResult(viewModel: SearchMoviesScene.SearchMovies.ViewModel)
    func showSelectedMovie(viewModel: SearchMoviesScene.SelectMovie.ViewModel)
}

protocol SearchMoviesViewControllerOutput {
    func searchMovie(request: SearchMoviesScene.SearchMovies.Request)
    func selectMovie(request: SearchMoviesScene.SelectMovie.Request)
}

class SearchMoviesViewController: UIViewController, SearchMoviesViewControllerInput {
    
    var output: SearchMoviesViewControllerOutput?
    var router: SearchMoviesRouter?
    
    
    var cellModels: [SearchMoviesScene.SearchMovies.ViewModel.CellModel] = []
    var errorState: Bool = false
    
    @IBOutlet weak var searchTextField: UITextField!
    @IBOutlet weak var resultMoviesCollectionView: UICollectionView!
    
    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        SearchMoviesConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        registerCells()
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        let touch = touches.first
        
        if touch?.view != searchTextField {
            view.endEditing(true)
        }
    }
    
    // MARK: Requests
    
    func searchMovie(query: String) {
        let request = SearchMoviesScene.SearchMovies.Request(query: query)
        output?.searchMovie(request: request)
    }
    
    func selectMovie(at index: Int) {
        let request = SearchMoviesScene.SelectMovie.Request(index: index)
        output?.selectMovie(request: request)
    }
    
    // MARK: Display logic
    
    func displaySearchMovieResult(viewModel: SearchMoviesScene.SearchMovies.ViewModel) {
        switch viewModel.state {
        case .success(let cellModels):
            handleShowFetchedMoviesSuccess(cellModels: cellModels)
        case .failure(let error):
            handleShowFetchedMoviesFailure(errorMessage: error)
        }
    }
    
    func showSelectedMovie(viewModel: SearchMoviesScene.SelectMovie.ViewModel) {
        router?.navigateToMovieDetailViewController()
    }
    
    // MARK: Handlers
    
    func handleShowFetchedMoviesSuccess(cellModels: [SearchMoviesScene.SearchMovies.ViewModel.CellModel]) {
        self.cellModels = cellModels
        resultMoviesCollectionView.reloadData()
        errorState = false
    }
    
    func handleShowFetchedMoviesFailure(errorMessage: String) {
        errorState = true
        resultMoviesCollectionView.reloadSections(IndexSet(integer: 1))
        print(errorMessage)
    }
    
    // MARK: IBActions
    
    @IBAction func backButtonTapped(_ sender: Any) {
        navigationController?.popViewController(animated: true)
    }
    
    @IBAction func searchTextFieldDidEdited(_ sender: Any) {
        guard let searchInput = searchTextField.text else { return }
        resultMoviesCollectionView.setContentOffset(.zero, animated: true)
        if searchInput.count > 2 {
            searchMovie(query: searchInput)
        } else {
            resultMoviesCollectionView.reloadData()
            cellModels = []
        }
    }
    
    // MARK: Convenience
    
    func registerCells() {
        let loadingCellIdentifier = LoadingCollectionViewCell.cellIdentifier
        let loadingCell = UINib(nibName: loadingCellIdentifier, bundle: nil)
        resultMoviesCollectionView.register(loadingCell, forCellWithReuseIdentifier: loadingCellIdentifier)
    }
}

//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there
extension SearchMoviesViewController: SearchMoviesPresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router?.passDataToNextScene(for: segue)
    }
}

extension SearchMoviesViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return section == 0 ? cellModels.count : 1
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if indexPath.section == 0 {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "SearchMovieCell", for: indexPath) as? SearchMoviesCollectionViewCell else { return UICollectionViewCell() }
            cell.fill(model: cellModels[indexPath.row])
            return cell
        } else {
            return collectionView.dequeueReusableCell(withReuseIdentifier: LoadingCollectionViewCell.cellIdentifier, for: indexPath)
        }
    }
}

extension SearchMoviesViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        selectMovie(at: indexPath.row)
    }
    
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 2
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        if indexPath.section == 0 {
            return CGSize(width: collectionView.bounds.width * 0.48, height: collectionView.bounds.width * 0.72)
        } else if errorState || cellModels.isEmpty {
            return .zero
        } else {
            return CGSize(width: collectionView.bounds.width, height: 100)
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        if indexPath.section == 1 {
            if errorState || cellModels.isEmpty {
                cell.isHidden = true
            } else {
                cell.isHidden = false
            }
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
        guard indexPath.row > cellModels.count - 10, !errorState else { return }
        searchMovie(query: "")
    }
}
