//
//  UpcomingMoviesInteractor.swift
//  CineApp
//
//  Created by Giovane Silva de Menezes Cavalcante on 05/01/19.
//  Copyright (c) 2019 GSMenezes. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import RxSwift

protocol UpcomingMoviesInteractorInput {
    func fetchMovies(request: UpcomingMoviesScene.FetchMovies.Request)
    func selectMovie(request: UpcomingMoviesScene.SelectMovie.Request)
}

protocol UpcomingMoviesInteractorOutput {
    func presentMovies(response: UpcomingMoviesScene.FetchMovies.Response)
    func presentSelectedMovie(response: UpcomingMoviesScene.SelectMovie.Response)
}

protocol UpcomingMoviesDataSource {
    var selectedMovie: MovieResult? { get }
}

protocol UpcomingMoviesDataDestination {
    
}

class UpcomingMoviesInteractor: UpcomingMoviesInteractorInput, UpcomingMoviesDataSource, UpcomingMoviesDataDestination {
    
    var output: UpcomingMoviesInteractorOutput?
    var fetchMoviesWorker: FetchMoviesWorker!
    var genreListFeedService = GenreListFeedService()
    let disposeBag = DisposeBag()
    
    var selectedMovie: MovieResult?
    
    var currentPage = 1
    var numberOfPages: Int?
    var moviesList: [MovieResult] = []
    
    lazy var onGernresDidFetch: FetchGenresCompletion = { [weak self] in
        self?.fetchMoviesformAPI()
    }
    
    // MARK: Lifecycle
    
    init(fetchMoviesWorker: FetchMoviesWorker = FetchMoviesWorker()) {
        self.fetchMoviesWorker = fetchMoviesWorker
    }
    
    // MARK: Business logic
    
    func fetchMovies(request: UpcomingMoviesScene.FetchMovies.Request) {
        genreListFeedService.fetchGenres(onComplete: onGernresDidFetch)
    }
    
    func fetchMoviesformAPI() {
        guard currentPage <= (numberOfPages ?? 1) else {
            handleFetchMoviesFailure(error: MoviesError.lastPageReached)
            return
        }
        fetchMoviesWorker.fetchMovies(page: currentPage).subscribe { [weak self] result in
            switch result {
            case .success(let moviesPage):
                self?.handleFetchMoviesSuccess(result: moviesPage)
            case .error(let error):
                self?.handleFetchMoviesFailure(error: error)
            }
            }.disposed(by: disposeBag)
    }
    
    func selectMovie(request: UpcomingMoviesScene.SelectMovie.Request) {
        selectedMovie = moviesList[request.index]
        let request = UpcomingMoviesScene.SelectMovie.Response()
        output?.presentSelectedMovie(response: request)
    }
    
    // MARK: Handlers
    
    func handleFetchMoviesSuccess(result: UpcomingMoviesPage) {
        guard let results = result.results, let numberOfPages = result.totalPages, let currentPage = result.page else {
            handleFetchMoviesFailure(error: MoviesError.unknown)
            return
        }
        self.currentPage = currentPage + 1
        self.numberOfPages = numberOfPages
        self.moviesList.append(contentsOf: results)
        let response = UpcomingMoviesScene.FetchMovies.Response(state: .success(upcomingMovies: moviesList))
        output?.presentMovies(response: response)
    }
    
    func handleFetchMoviesFailure(error: Error) {
        let response = UpcomingMoviesScene.FetchMovies.Response(state: .failure(errorMessage: error.localizedDescription))
        output?.presentMovies(response: response)
    }

}
